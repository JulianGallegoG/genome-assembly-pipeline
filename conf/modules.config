// Stage definitions for the pipeline
stage {
    preprocess = '01_read_preprocessing'
}

// Process-specific configurations
process {
    // BAM to FASTQ conversion
    withName: 'SAMTOOLS_BAM2FQ' {
        tag = { "$meta.id:$reads.baseName" }
        ext.prefix = { reads.baseName }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${stage.preprocess}/fastq" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Adapter trimming
    withName: 'CUTADAPT' {
        tag = { "${meta.id}" }
        ext.prefix = { "${meta.id}_trimmed" }
        ext.args = [
            "-e 0.1",                    // Maximum error rate
            "-O 35",                     // Minimum overlap length
            "-a ATCTCTCTCAACAACAACAACGGAGGAGGAGGAAAAGAGAGAGAT",
            "-a ATCTCTCTCTTTTCCTCCTCCTCCGTTGTTGTTGTTGAGAGAGAT",
            "--discard-trimmed",
            "-n 2"
        ].join(' ')
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${stage.preprocess}/trimmed" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Quality control
    withName: 'FASTQC' {
        tag = { "${meta.id}" }
        ext.args = '--quiet'
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/${stage.preprocess}/fastqc" },
                mode: params.publish_mode,
                pattern: "*.{html,zip}"
            ],
            [
                path: { "${params.outdir}/${meta.id}/${stage.preprocess}/fastqc" },
                mode: params.publish_mode,
                pattern: "*.version.txt",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ]
    }
}
